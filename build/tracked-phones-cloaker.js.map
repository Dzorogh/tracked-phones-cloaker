{"mappings":"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","sources":["src/main.ts","src/PhoneWrapper.ts","src/Service.ts","src/PhoneNumberParser.ts","src/PhoneNumberItem.ts","src/PhoneNumberFormatter.ts","src/CalltouchService.ts","src/PluginDetector.ts","src/setupStyle.ts","node_modules/@parcel/runtime-js/lib/bundles/runtime-5480b138fa10e4f3.js"],"sourcesContent":["import {setupPhoneWrapper} from \"./PhoneWrapper\"\nimport {Service} from \"./Service\"\nimport {setupStyle} from \"./setupStyle\"\nimport type {PhonesMap, WrappersSet} from \"./types\";\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nclass TrackedPhonesCloaker {\n    public constructor({calltouchId}: { calltouchId: string }) {\n        setupPhoneWrapper()\n        setupStyle()\n\n        const phonesMap: PhonesMap = new Map()\n        const wrappersSet: WrappersSet = new Set()\n\n        const service = new Service(phonesMap, wrappersSet, calltouchId)\n\n        service.processAllPhones()\n\n        setInterval(() => service.processAllPhones(), 1000)\n    }\n}\n","export const phoneWrapperTagName = 'tracked-phone'\n\nexport class PhoneWrapper extends HTMLElement {\n}\n\nexport function setupPhoneWrapper() {\n    customElements.define(phoneWrapperTagName, PhoneWrapper)\n}\n\n","import {PhoneNumbersParser} from \"./PhoneNumberParser\"\nimport type {PhonesMap, WrappersSet} from \"./types\"\nimport type {PhoneNumberItem} from \"./PhoneNumberItem\"\nimport {CalltouchService} from \"./CalltouchService\"\n\nexport class Service {\n    private readonly wrappersSet: WrappersSet\n    private readonly phonesMap: PhonesMap\n    private calltouchService: CalltouchService\n\n    public constructor(phonesMap: PhonesMap, wrappersSet: WrappersSet, calltouchId: string) {\n        this.phonesMap = phonesMap\n        this.wrappersSet = wrappersSet\n        this.calltouchService = new CalltouchService(calltouchId)\n    }\n\n    public processAllPhones() {\n        const t0 = performance.now()\n\n        const parser = new PhoneNumbersParser(document.body, this.phonesMap, this.wrappersSet)\n        const phones = parser.parseAllPhonesAsNodes()\n\n        phones.forEach((phone) => {\n            phone.init()\n\n            phone.onInteraction(async () => {\n                await this.replacePhone(phone)\n            })\n        })\n\n        const t1 = performance.now()\n        console.log(`Parsing phones take ${Math.round(t1 - t0)} milliseconds.`)\n\n        const t2 = performance.now()\n        console.log(`Formatting phones take ${Math.round(t2 - t1)} milliseconds.`)\n\n        return phones\n    }\n\n    public async replacePhone(phoneItem: PhoneNumberItem) {\n        console.log('Replacing')\n\n        await this.calltouchService\n            .whenLoaded()\n            .then(async (service) => {\n                const data = await service.dynamicReplacement([phoneItem.getDigits()])\n\n                // this.calltouchService.whenLoaded().then(async (service) => {\n                //     console.log(service.calltrackingParams())\n                // })\n\n                const siblings = this.phonesMap.get(phoneItem.getInitialDigits())\n\n                const trackedPhone = data && data[0] ? data[0].phoneNumber : phoneItem.getDigits()\n\n                if (siblings) {\n                    for (const sibling of siblings) {\n                        sibling.revealPhone(trackedPhone)\n                    }\n                }\n            })\n    }\n}\n","import {phoneWrapperTagName} from \"./PhoneWrapper\"\nimport {PhoneNumberItem} from \"./PhoneNumberItem\"\nimport type {PhonesMap, WrappersSet} from \"./types\"\n\nexport class PhoneNumbersParser {\n    private ruPhone = /((\\+7|[,78]) ?(\\d{10}|(\\(?\\d{3}\\)? ?\\d{3}(?:[ ,\\-]?\\d{2}){2})))/gim\n    // ruPhone = /(^8|7|\\+7)((\\d{10})|(\\s\\(\\d{3}\\)\\s\\d{3}\\s\\d{2}\\s\\d{2}))/im;\n    private excludedTags = ['script']\n\n    private readonly rootNode: HTMLElement\n    private phonesMap: PhonesMap\n    private wrappersSet: WrappersSet\n\n    public constructor(rootNode: HTMLElement, phonesMap: PhonesMap, wrappersSet: WrappersSet) {\n        this.phonesMap = phonesMap\n        this.wrappersSet = wrappersSet\n\n        if (rootNode) {\n            this.rootNode = rootNode\n        } else {\n            this.rootNode = document.body\n        }\n    }\n\n    public parseAllPhonesAsNodes() {\n        const nodesWithPhone = this.findTextNodesWithPhones()\n\n        const wrappedPhones = this.wrapPhones(nodesWithPhone)\n\n        wrappedPhones.forEach(item => {\n            this.addPhoneItemToMapAndSet(item)\n        })\n\n        return wrappedPhones\n    }\n\n    private addPhoneItemToMapAndSet(phoneItem: PhoneNumberItem) {\n        const phone = phoneItem.getInitialDigits()\n\n        // wrappers\n        this.wrappersSet.add(phoneItem.getWrapperNode())\n\n        // nodes by phone number\n        if (this.phonesMap.has(phone)) {\n            const existingSet = this.phonesMap.get(phone)\n            existingSet.add(phoneItem)\n            this.phonesMap.set(phone, existingSet)\n        } else {\n            this.phonesMap.set(phone, new Set([phoneItem]))\n        }\n    }\n\n    private wrapPhones(textNodes: Node[]): PhoneNumberItem[] {\n        const result = []\n\n        for (let textNode of textNodes) {\n            let parentNode = textNode.parentNode as HTMLElement\n            const phones = this.getPhoneMatches(textNode.textContent.trim())\n\n            if (parentNode.nodeName.toLowerCase() === phoneWrapperTagName.toLowerCase()) {\n                // already wrapped\n\n                if (this.wrappersSet.has(parentNode)) {\n                    // console.log('already wrapped correctly');\n                    continue\n                } else {\n                    console.log('Found broken Phone Wrapper!', parentNode)\n\n                    const result = this.unwrapPhone(parentNode)\n\n                    textNode = result.textNode\n                    parentNode = result.parentNode as HTMLElement\n                }\n            }\n\n            // Не рассматриваем ситуацию,\n            // где в одной ссылке может быть несколько номеров телефонов\n            if (parentNode.nodeName.toLowerCase() === 'a') {\n                // Если телефон найден в ссылке\n\n                const wrapperNode = document.createElement(phoneWrapperTagName)\n                wrapperNode.textContent = textNode.textContent\n                parentNode.replaceChild(wrapperNode, textNode)\n\n                result.push(\n                    new PhoneNumberItem(\n                        wrapperNode,\n                        parentNode\n                    )\n                )\n            } else if (parentNode.closest('a') && parentNode.closest('a').getAttribute('href').startsWith('tel:')) {\n                // Если выше по дереву есть ссылка, проверяем — телефонная ли она.\n\n                const wrapperNode = document.createElement(phoneWrapperTagName)\n                wrapperNode.textContent = textNode.textContent\n                parentNode.replaceChild(wrapperNode, textNode)\n\n                result.push(\n                    new PhoneNumberItem(\n                        wrapperNode,\n                        parentNode.closest('a')\n                    )\n                )\n            } else {\n                // Если это просто номер в тексте\n\n                const newLinkNodes = this.replacePhoneStringsWithLinks(textNode, phones)\n\n                result.push(...newLinkNodes.map((linkNode) => {\n                    const wrapperNode = document.createElement(phoneWrapperTagName)\n                    wrapperNode.textContent = linkNode.textContent\n                    linkNode.textContent = null\n                    linkNode.appendChild(wrapperNode)\n\n                    return new PhoneNumberItem(\n                        wrapperNode,\n                        linkNode\n                    )\n                }))\n            }\n        }\n\n        return result\n    }\n\n\n    private getPhoneMatches(text: string) {\n        const matches = text.matchAll(this.ruPhone)\n        return [...matches].map((match) => match[1])\n    }\n\n    // findStrings() {\n    //     return this.getPhoneMatches(this.rootNode.innerHTML)\n    // }\n\n    //  find all nodes that have phone in text\n    //  If node (or ony parent node) is link — return it,\n    //  else — wrap number inside node in link and return\n    //  returns Iterator\n    private findTextNodesWithPhones(): Node[] {\n\n        // Find all text nodes\n        const textNodesWalker = document\n            .createTreeWalker(this.rootNode, NodeFilter.SHOW_TEXT, (node) =>\n                !this.excludedTags.includes(node.parentNode.nodeName.toLowerCase())\n                && node.textContent.trim().length > 0\n                && this.getPhoneMatches(node.textContent.trim()).length > 0\n                    ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_REJECT\n            )\n\n        const resultArray = []\n\n        // Make array of nodes, that contains phones in self content\n        while (textNodesWalker.nextNode()) {\n            resultArray.push(textNodesWalker.currentNode)\n        }\n\n        return resultArray\n    }\n\n    private makeTelFromPhoneNumber(phone: string) {\n        return phone.replace(/\\D/g, \"\")\n    }\n\n    /**\n     * Will replace ALL phones in text node,\n     * even multiple times,\n     * for multiple phone numbers,\n     * with links and return new links nodes.\n     */\n    private replacePhoneStringsWithLinks(textNode: Node, phones: string[]) {\n        const parentNode = textNode.parentNode\n\n        const resultNodes = [textNode]\n\n        // for each phone split text nodes and make result array\n        phones.forEach((phone) => {\n            const linkElement = document.createElement('a')\n            const tel = this.makeTelFromPhoneNumber(phone)\n            linkElement.setAttribute('href', \"tel:\" + tel)\n            linkElement.textContent = phone\n\n            resultNodes.forEach((resultNode, resultNodeIndex) => {\n                if (resultNode.nodeType === Node.TEXT_NODE) {\n                    const newStrings = resultNode.textContent.split(phone)\n                    const newNodes = []\n\n                    newStrings.forEach((newString, index) => {\n                        if (newString) {\n                            newNodes.push(document.createTextNode(newString))\n                        }\n\n                        if (index < newStrings.length - 1) {\n                            // if it is not last item — add link element.\n\n                            newNodes.push(linkElement)\n                        }\n                    })\n\n                    // replace splitted text string with new nodes\n                    resultNodes.splice(resultNodeIndex, 1, ...newNodes)\n                }\n            })\n        })\n\n        const resultLinksNodes = []\n\n        resultNodes.forEach((resultNode, resultNodeIndex) => {\n            const uniqueNode = resultNode.cloneNode(true)\n\n            if (resultNodeIndex === 0) {\n                parentNode.replaceChild(uniqueNode, textNode)\n            } else {\n                parentNode.appendChild(uniqueNode)\n            }\n\n            if (resultNode.nodeType !== Node.TEXT_NODE) {\n                resultLinksNodes.push(uniqueNode)\n            }\n        })\n\n        return resultLinksNodes\n    }\n\n    private unwrapPhone(node: Node) {\n        const content = node.parentNode.textContent\n        const parentNode = node.parentNode\n        const textNode = document.createTextNode(content)\n        parentNode.replaceChild(textNode, node)\n\n        return {parentNode, textNode}\n    }\n}\n","import {PhoneNumbersFormatter} from \"./PhoneNumberFormatter\"\n\nexport class PhoneNumberItem {\n    private onInteractionCallbacks: (() => Promise<void>)[] = []\n    private readonly wrapperNode: HTMLElement\n    private readonly linkNode: HTMLElement\n    private readonly initialDigits: string\n    private isCloaked = false\n    private cloakedAttrName = 'cloaked'\n    private isLoading = false\n    private loadingAttrName = 'loading'\n    private isClickDelayed = false\n\n    public constructor(wrapperNode: HTMLElement, linkNode: HTMLElement) {\n        this.wrapperNode = wrapperNode\n        this.linkNode = linkNode\n\n        this.initialDigits = this.getDigits()\n    }\n\n    public init() {\n        this.cloak()\n        this.formatTel()\n        this.formatText()\n\n        this.addListeners()\n    }\n\n    public getWrapperNode(): HTMLElement {\n        return this.wrapperNode\n    }\n\n    public getLinkNode(): HTMLElement {\n        return this.linkNode\n    }\n\n    public revealPhone(phone: string) {\n        this.setPhone(phone)\n\n        this.formatTel()\n        this.formatText()\n\n        this.loadingFinish()\n        this.uncloak()\n\n        this.removeHoverListener()\n        this.removeClickListener()\n\n        this.finishDelayedClick()\n    }\n\n    public getDigits() {\n        const formatter = new PhoneNumbersFormatter(this.getText())\n\n        return formatter.getDigits()\n    }\n\n    public getInitialDigits() {\n        return this.initialDigits\n    }\n\n    public onInteraction(cb: () => Promise<void>) {\n        this.onInteractionCallbacks.push(cb)\n    }\n\n    private getText(): string {\n        return this.getWrapperNode().textContent\n    }\n\n    private setTel(value: string) {\n        this.getLinkNode().setAttribute('href', 'tel:' + value)\n    }\n\n    private setText(newValue: string) {\n        this.getWrapperNode().textContent = newValue\n\n        return newValue\n    }\n\n    private getHref() {\n        return this.getLinkNode().getAttribute('href')\n    }\n\n    private formatTel() {\n        const formatter = new PhoneNumbersFormatter(this.getText())\n\n        this.setTel(formatter.getDigits())\n    }\n\n    private formatText() {\n        const formatter = new PhoneNumbersFormatter(this.getText())\n\n        this.setText(formatter.getFormattedPhone())\n    }\n\n    private loadingStart() {\n        this.isLoading = true\n        this.getWrapperNode().setAttribute(this.loadingAttrName, '')\n    }\n\n    private loadingFinish() {\n        this.isLoading = true\n        this.getWrapperNode().removeAttribute(this.loadingAttrName)\n    }\n\n    private setPhone(phone: string) {\n        const formatter = new PhoneNumbersFormatter(phone)\n\n        this.setText(formatter.getFormattedPhone())\n        this.setTel(formatter.getDigits())\n    }\n\n    private async onInteractionTrigger() {\n        for await (const cb of this.onInteractionCallbacks) {\n            await cb()\n        }\n    }\n\n    private handleHover = async () => {\n        this.removeHoverListener()\n\n        this.loadingStart()\n\n        await this.onInteractionTrigger()\n\n        this.loadingFinish()\n    }\n\n    private handleClick = async (e: MouseEvent) => {\n        this.startDelayedClick(e)\n\n        if (!this.isLoading) {\n            this.loadingStart()\n            await this.onInteractionTrigger()\n            this.loadingFinish()\n        }\n    }\n\n    private removeClickListener() {\n        this.getWrapperNode().removeEventListener('click', this.handleClick)\n    }\n\n    private removeHoverListener() {\n        this.getWrapperNode().removeEventListener('mouseenter', this.handleHover)\n    }\n\n    private uncloak() {\n        this.isCloaked = false\n\n        this.getWrapperNode().removeAttribute(this.cloakedAttrName)\n    }\n\n    private cloak() {\n        this.isCloaked = true\n\n        this.getWrapperNode().setAttribute(this.cloakedAttrName, '')\n    }\n\n    private addListeners() {\n        this.getWrapperNode().addEventListener('mouseenter', this.handleHover)\n        this.getWrapperNode().addEventListener('click', this.handleClick)\n    }\n\n    private startDelayedClick(e: MouseEvent) {\n        if (this.isCloaked) {\n            e.preventDefault()\n            this.isClickDelayed = true\n        }\n    }\n\n    private finishDelayedClick() {\n        if (this.isClickDelayed) {\n            location.href = this.getHref()\n            this.isClickDelayed = false\n        }\n    }\n}\n","export class PhoneNumbersFormatter {\n    public phone = undefined\n\n    public constructor(phone) {\n        this.phone = phone\n    }\n\n    public isFormatted() {\n        return !!this.phone.match(/^(.*([ ()-]).*)$/)\n    }\n\n    public getDigits() {\n        return this.phone.replace(/\\D/g, \"\")\n    }\n\n    // formatLinkTel(element: HTMLElement) {\n    //     element.setAttribute('href', 'tel:' + this.getDigits())\n    // }\n    //\n    // formatText(element: HTMLElement) {\n    //     element.textContent = this.getFormattedPhone()\n    // }\n\n    public getFormattedPhone() {\n        const phoneDigits = this.getDigits().slice(-10)\n        let startsWith = ''\n\n        if (phoneDigits.startsWith('800')) {\n            startsWith = '8'\n        } else {\n            startsWith = '+7'\n        }\n\n        return phoneDigits.replace(/(\\d{3})(\\d{3})(\\d{2})(\\d{2})$/g, `${startsWith} $1 $2-$3-$4`)\n    }\n}\n","import type {CTPool} from \"./types\"\nimport {PluginDetector} from \"./PluginDetector\"\n\nexport class CalltouchService {\n    private ct: any\n    private id: string\n\n    constructor(ctId: string) {\n        this.id = ctId\n    }\n\n\n    public async whenLoaded() {\n        const detector = new PluginDetector()\n\n        this.ct = await detector.awaitForWindowObject('ct') as any\n\n        return this\n    }\n\n    public dynamicReplacement(subPoolNamesContains: string[]) {\n        return new Promise((resolve) => {\n            this.ct(this.id, 'dynamic_replacement', {\n                callback: (success: boolean, data: CTPool[]) => {\n                    resolve(data)\n                },\n                subPoolNamesContains\n            })\n        })\n    }\n}\n","export class PluginDetector {\n    private iterations = 0\n    private interval: ReturnType<typeof setInterval> = undefined\n\n    public awaitForWindowObject = (param: string) => {\n        return new Promise((resolve, reject) => {\n            this.interval = setInterval(() => {\n                if (window[param]) {\n                    clearInterval(this.interval)\n                    resolve(window[param])\n                }\n\n                if (this.iterations > 1000) {\n                    clearInterval(this.interval)\n                    reject()\n                }\n            }, 50)\n        })\n    }\n}\n","// @ts-ignore\nimport style from \"bundle-text:./style.css\"\n\nexport function setupStyle() {\n    const styleElement = document.createElement(\"style\")\n    styleElement.textContent = style as string\n    document.head.appendChild(styleElement)\n}\n\n","module.exports = \"08c8e70b897f1620\";"],"names":[],"version":3,"file":"tracked-phones-cloaker.js.map"}